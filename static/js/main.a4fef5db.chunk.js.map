{"version":3,"sources":["components/wallpaper_item.js","components/wallpapers.js","components/search_bar.js","components/App.js","serviceWorker.js","index.js"],"names":["WallpaperItem","file","data","preview","enabled","console","log","previewImage","images","resolutions","length","url","replace","subReddit","post_link","permalink","className","href","target","rel","over_18","src","width","alt","title","source","height","Wallpapers","files","map","key","id","SearchBar","props","state","term","type","onChange","event","search","value","this","name","placeholder","setState","onSearchTermChange","React","Component","App","currentSubReddit","sort","after","before","page","nextPage","fetch","then","res","json","children","window","scrollTo","catch","prevPage","newState","wallpaperSubReddit","portraitSubReddit","memesSubReddit","subRedditArray","sorts","changeSubReddit","sub","contentJSX","searchSubReddit","_","debounce","pagingJSX","buttonNext","onClick","buttonPrev","style","display","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","index","changeSort","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a4fef5db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst WallpaperItem = ({ file }) => {\r\n  if (file.data.preview) {\r\n    if (file.data.preview.enabled) {\r\n      console.log(file.data);\r\n      let previewImage =\r\n        file.data.preview.images[0].resolutions[\r\n          file.data.preview.images[0].resolutions.length - 1\r\n        ].url;\r\n      previewImage = previewImage.replace(/&amp;/g, '&');\r\n      let subReddit = 'https://reddit.com/r/' + file.data.subReddit;\r\n      let post_link = 'https://reddit.com' + file.data.permalink;\r\n      return (\r\n        <div className='col-sm-12 col-md-6 col-lg-4'>\r\n          <div className=' card-link'>\r\n            <div className='card'>\r\n              <div className='card-img-top'>\r\n                <a href={post_link} target='_blank' rel='noopener noreferrer'>\r\n                  <button className='btn btn-secondary btn-sm top-right-float'>\r\n                    View Post\r\n                  </button>\r\n                </a>\r\n                <a\r\n                  href={file.data.url}\r\n                  target='_blank'\r\n                  rel='noopener noreferrer'\r\n                >\r\n                  {file.data.over_18 ? (\r\n                    <div className='p-4'>NSFW</div>\r\n                  ) : (\r\n                    <img\r\n                      src={previewImage}\r\n                      className='card-img-top'\r\n                      width='100%'\r\n                      alt={file.data.title}\r\n                    />\r\n                  )}\r\n                </a>\r\n              </div>\r\n              <div className='card-body'>\r\n                <div className='card-title'>\r\n                  <a\r\n                    href={file.data.url}\r\n                    target='_blank'\r\n                    rel='noopener noreferrer'\r\n                  >\r\n                    {file.data.title}\r\n                  </a>\r\n                </div>\r\n                <p className='card-text'>\r\n                  Resolution: {file.data.preview.images[0].source.width}x\r\n                  {file.data.preview.images[0].source.height}\r\n                  <br />\r\n                  Posted on:{' '}\r\n                  <a href={subReddit} target='_blank' rel='noopener noreferrer'>\r\n                    Reddit{file.data.subReddit}\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return <div></div>;\r\n};\r\n\r\nexport default WallpaperItem;\r\n","import React from 'react';\r\nimport WallpaperItem from './wallpaper_item';\r\n\r\nconst Wallpapers = ({ files }) => {\r\n  return (\r\n    <div className='row'>\r\n      {files.map((file) => (\r\n        <WallpaperItem key={file.data.id} file={file} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wallpapers;\r\n","import React from 'react';\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: '',\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='m-2'>\r\n        <div className='input-group mb-2'>\r\n          <div className='input-group-prepend'>\r\n            <div className='input-group-text'>Reddit</div>\r\n          </div>\r\n          <input\r\n            type='text'\r\n            className='form-control'\r\n            onChange={(event) => this.search(event.target.value)}\r\n            value={this.state.term}\r\n            name='search'\r\n            placeholder='search here...'\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  search(term) {\r\n    this.setState({ term });\r\n    this.props.onSearchTermChange(term);\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import _ from 'lodash';\r\nimport React from 'react';\r\nimport Wallpapers from './wallpapers';\r\nimport SearchBar from './search_bar';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.wallpaperSubReddit =\r\n      'wallpapers+wallpaper+wideScreenWallpaper+hdWallpaper';\r\n    this.portraitSubReddit =\r\n      'mobileWallpapers+amolEdBackgrounds+verticalWallpapers';\r\n    this.memesSubReddit = 'memes+dankMemes+memeEconomy+AniMemes';\r\n    this.subRedditArray = [\r\n      'wallpaper',\r\n      'wallpapers',\r\n      'wideScreenWallpaper',\r\n      'hdWallpaper',\r\n      'memes',\r\n      'dankMemes',\r\n      'memeEconomy',\r\n      'AniMemes',\r\n      'mobileWallpapers',\r\n      'amolEdBackgrounds',\r\n      'verticalWallpapers',\r\n    ];\r\n    this.url = 'https://www.reddit.com/r/';\r\n    this.sorts = ['hot', 'new', 'top', 'controversial', 'rising'];\r\n  }\r\n\r\n  state = {\r\n    currentSubReddit: 'wallpapers+wallpaper+wideScreenWallpaper+hdWallpaper',\r\n    sort: 'hot',\r\n    files: [],\r\n    after: null,\r\n    before: null,\r\n    page: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.changeSubReddit(this.state.currentSubReddit);\r\n  }\r\n\r\n  nextPage = () => {\r\n    fetch(\r\n      this.url +\r\n        this.state.currentSubReddit +\r\n        '/' +\r\n        this.state.sort +\r\n        '.json?count=' +\r\n        this.state.page * 25 +\r\n        '&after=' +\r\n        this.state.after\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState(() => ({\r\n          files: data.data.children,\r\n          after: data.data.after,\r\n          before: data.data.before,\r\n          page: this.state.page + 1,\r\n        }));\r\n        window.scrollTo(0, 0);\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  prevPage = () => {\r\n    fetch(\r\n      this.url +\r\n        this.state.currentSubReddit +\r\n        '/' +\r\n        this.state.sort +\r\n        '.json?count=' +\r\n        ((this.state.page - 1) * 25 - 1) +\r\n        '&before=' +\r\n        this.state.before\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        window.scrollTo(0, 0);\r\n        let newState = {\r\n          files: data.data.children,\r\n          after: data.data.after,\r\n          before: data.data.before,\r\n        };\r\n        if (this.state.page > 1) {\r\n          newState.page = this.state.page - 1;\r\n        }\r\n        this.setState(newState);\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  changeSubReddit(sub) {\r\n    /*\r\n     * Empty the files so we will show 'Loading...'\r\n     * Reset page to 1\r\n     */\r\n    this.setState({\r\n      files: [],\r\n      currentSubReddit: sub,\r\n      page: 1,\r\n    });\r\n    fetch(this.url + sub + '/' + this.state.sort + '.json')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          files: data.data.children,\r\n          after: data.data.after,\r\n          before: data.data.before,\r\n        });\r\n        window.scrollTo(0, 0);\r\n      })\r\n      .catch(console.log);\r\n  }\r\n\r\n  changeSort(sort) {\r\n    /*\r\n     * Empty the files so we will show 'Loading...'\r\n     * Reset page to 1\r\n     */\r\n    this.setState({\r\n      files: [],\r\n      sort: sort,\r\n      page: 1,\r\n    });\r\n    fetch(this.url + this.state.currentSubReddit + '/' + sort + '.json')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          files: data.data.children,\r\n          after: data.data.after,\r\n          before: data.data.before,\r\n        });\r\n        window.scrollTo(0, 0);\r\n      })\r\n      .catch(console.log);\r\n  }\r\n\r\n  searchSubReddit(subReddit) {\r\n    if (subReddit.length !== 0) {\r\n      this.changeSubReddit(subReddit);\r\n    } else {\r\n      this.changeSubReddit(this.wallpaperSubReddit);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const searchSubReddit = _.debounce((term) => {\r\n      this.searchSubReddit(term);\r\n    }, 600);\r\n    let contentJSX;\r\n    if (this.state.files.length > 0) {\r\n      let pagingJSX;\r\n      const buttonNext = (\r\n        <button\r\n          className='btn btn-primary'\r\n          type='submit'\r\n          onClick={this.nextPage}\r\n        >\r\n          Next\r\n        </button>\r\n      );\r\n      const buttonPrev = (\r\n        <button\r\n          className='btn btn-secondary'\r\n          type='submit'\r\n          onClick={this.prevPage}\r\n        >\r\n          Previous\r\n        </button>\r\n      );\r\n      if (this.state.after === null && this.state.before !== null) {\r\n        // last page\r\n        pagingJSX = <div>{buttonPrev}</div>;\r\n      } else if (this.state.before === null && this.state.after !== null) {\r\n        // first page\r\n        pagingJSX = <div>{buttonNext}</div>;\r\n      } else if (this.state.before !== null && this.state.after !== null) {\r\n        // in between pages\r\n        pagingJSX = (\r\n          <div>\r\n            {buttonPrev}{' '}\r\n            <span className='p-3 text-black-50'>Page {this.state.page}</span>{' '}\r\n            {buttonNext}\r\n          </div>\r\n        );\r\n      } else {\r\n        pagingJSX = <div>No Posts found.</div>;\r\n      }\r\n      contentJSX = (\r\n        <div className='m-2'>\r\n          <Wallpapers files={this.state.files} />\r\n          <br />\r\n          <div className='center-block m-2'>{pagingJSX}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      contentJSX = (\r\n        <div className='p-2'>\r\n          <center>Loading...</center>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let currentSubReddit;\r\n    if (this.state.currentSubReddit === this.wallpaperSubReddit) {\r\n      currentSubReddit = 'Landscape Wallpapers';\r\n    } else if (this.state.currentSubReddit === this.portraitSubReddit) {\r\n      currentSubReddit = 'Portrait Wallpapers';\r\n    } else if (this.state.currentSubReddit === this.memesSubReddit) {\r\n      currentSubReddit = 'Memes SubReddit';\r\n    } else {\r\n      currentSubReddit = 'r/' + this.state.currentSubReddit;\r\n    }\r\n\r\n    return (\r\n      <div className='container'>\r\n        <br />\r\n        <div>\r\n          <div className='dropdown m-2' style={{ display: 'inline' }}>\r\n            <button\r\n              className='btn btn-primary'\r\n              type='button'\r\n              id='dropdownMenuButton'\r\n              data-toggle='dropdown'\r\n              aria-haspopup='true'\r\n              aria-expanded='false'\r\n            >\r\n              {currentSubReddit} &nbsp;\r\n            </button>\r\n            <div className='dropdown-menu' aria-labelledby='dropdownMenuButton'>\r\n              <a\r\n                className='dropdown-item'\r\n                href='#subChange'\r\n                onClick={() => this.changeSubReddit(this.wallpaperSubReddit)}\r\n              >\r\n                Landscape Wallpapers\r\n              </a>\r\n              <a\r\n                className='dropdown-item'\r\n                href='#subChange'\r\n                onClick={() => this.changeSubReddit(this.portraitSubReddit)}\r\n              >\r\n                Portrait Wallpapers\r\n              </a>\r\n              <a\r\n                className='dropdown-item'\r\n                href='#subChange'\r\n                onClick={() => this.changeSubReddit(this.memesSubReddit)}\r\n              >\r\n                Memes SubReddit\r\n              </a>\r\n              {this.subRedditArray.map((subReddit, index) => (\r\n                <a\r\n                  className='dropdown-item'\r\n                  key={index}\r\n                  href='#subChange'\r\n                  onClick={() => this.changeSubReddit(subReddit)}\r\n                >\r\n                  {subReddit}\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className='dropdown m-2' style={{ display: 'inline' }}>\r\n            <button\r\n              className='btn btn-outline-secondary dropdown-toggle'\r\n              type='button'\r\n              id='dropdownMenuButton'\r\n              data-toggle='dropdown'\r\n              aria-haspopup='true'\r\n              aria-expanded='false'\r\n            >\r\n              {this.state.sort} &nbsp;\r\n            </button>\r\n            <div className='dropdown-menu' aria-labelledby='dropdownMenuButton'>\r\n              {this.sorts.map((sort, index) => (\r\n                <a\r\n                  className='dropdown-item'\r\n                  key={index}\r\n                  href='#subChange'\r\n                  onClick={() => this.changeSort(sort)}\r\n                >\r\n                  {sort}\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className='m-3'></div>\r\n          <SearchBar onSearchTermChange={(term) => searchSubReddit(term)} />\r\n        </div>\r\n        <br />\r\n        {contentJSX}\r\n        <br />\r\n        <footer>\r\n          <center>\r\n            <p>\r\n              Please find more project\r\n              <a href='https://schand143.github.io/My-Portfolio/'>\r\n                {' '}\r\n                Portfolio{' '}\r\n              </a>\r\n              .<br />\r\n            </p>\r\n          </center>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}